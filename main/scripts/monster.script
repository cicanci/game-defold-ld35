go.property("speed", 150)
go.property("attack", 5)
go.property("defense", 0)
go.property("life", 50)
go.property("level", 1)
go.property("color", 1)
go.property("type", 2)
go.property("movement", 1)

local states = { idle = 0, attack = 1, damage = 2, dead = 3 }
local colors = { blue = 1, red = 2, purple = 3 }
local types = { small = 1, normal = 2 }
local movements = { horizontal = 1, vertical = 2 }

local function damagefeedback(self, show)
	msg.post("#monster_damage", "disable")
	msg.post("#monster_damage_head", "disable")
	
	if show then
		if self.type == types.small then
			msg.post("#monster_damage_head", "enable")
		elseif self.type == types.normal then
			msg.post("#monster_damage", "enable")
		end
	end
end

local function updateState(self, newState)
	if newState ~= self.state then
		if self.delay_damage >= 0.5 then
			self.state = newState
		end
		
		if self.state == states.idle then
	    	damagefeedback(self, false)
	    elseif self.state == states.attack then
	    	--print("MONSTER ATTACK")
	    elseif self.state == states.damage then
			--print("MONSTER ATTACKED")
	    else
	    	msg.post("hud#gui", "update_text", { score = self.level } )
			print("MONSTER DEAD")
			go.delete()
		end
	end
end

local function updateMonster(self)
	msg.post("#collision_small", "disable")
	msg.post("#collision_normal", "disable")
	
	if self.color == colors.blue then
		if self.type == types.small then
			msg.post("#monster_head", "play_animation", {id = hash("monster_blue_head")})
    		msg.post("#monster_body", "disable")
    		msg.post("#collision_small", "enable")
		elseif self.type == types.normal then
			msg.post("#monster_head", "play_animation", {id = hash("monster_blue_head")})
    		msg.post("#monster_body", "play_animation", {id = hash("monster_blue_body")})
    		msg.post("#collision_normal", "enable")
		end
    elseif self.color == colors.red then
    	if self.type == types.small then
			msg.post("#monster_head", "play_animation", {id = hash("monster_red_head")})
    		msg.post("#monster_body", "disable")
    		msg.post("#collision_small", "enable")
		elseif self.type == types.normal then
			msg.post("#monster_head", "play_animation", {id = hash("monster_red_head")})
    		msg.post("#monster_body", "play_animation", {id = hash("monster_red_body")})
    		msg.post("#collision_normal", "enable")
		end
    elseif self.color == colors.purple then
    	if self.type == types.small then
			msg.post("#monster_head", "play_animation", {id = hash("monster_purple_head")})
    		msg.post("#monster_body", "disable")
    		msg.post("#collision_small", "enable")
		elseif self.type == types.normal then
			msg.post("#monster_head", "play_animation", {id = hash("monster_purple_head")})
    		msg.post("#monster_body", "play_animation", {id = hash("monster_purple_body")})
    		msg.post("#collision_normal", "enable")
		end
    end
    
    damagefeedback(self, false)
end

local function updateHud(self)
	local percent = (self.life * 100) / self.total_life
	
	if percent >= 100 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_100")})
	elseif percent >= 90 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_90")})
	elseif percent >= 80 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_80")})
	elseif percent >= 70 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_70")})
	elseif percent >= 60 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_60")})
	elseif percent >= 50 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_50")})
	elseif percent >= 40 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_40")})
	elseif percent >= 30 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_30")})
	elseif percent >= 20 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_20")})
	elseif percent >= 10 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_10")})
	else
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_0")})
	end
end

function init(self)
    self.state = states.idle
    self.delay_damage = 0.5;
    self.total_life = self.life
    
    if self.speed < 0 then
    	self.speed = self.speed + math.random(-50, 0)
    else
    	self.speed = self.speed + math.random(0, 50)
    end
    
    updateMonster(self)
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
	local pos = go.get_position(self.id)
	
	if self.movement == movements.horizontal then
		pos.x = pos.x + (self.speed * dt)
	else
		pos.y = pos.y + (self.speed * dt)
	end
	
    go.set_position(pos, self.id)

    if self.state == states.damage then
		if self.delay_damage < 0.5 then
			damagefeedback(self, true)
		else
			updateState(self, states.idle)
		end    		
		self.delay_damage = self.delay_damage + dt
	end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("contact_point_response") then
    	if message.group == hash("level") then
			local pos = go.get_position() + message.normal * message.distance
	    	go.set_position(pos)
	    	self.speed = self.speed * (-1)
	    end
	    
	    if message.group == hash("knight") then
	    	msg.post("knight#script", "set_damage", { damage = self.attack })
	    end
	    
	    if message.group == hash("knight_attack") then
	    	msg.post("knight#script", "set_attack", { defense = self.defense })
	    end
	    
	    if message.group == hash("monster") then
	    	if self.color ~= colors.purple or self.type == types.small then
    			local monster = { id = go.get_id(), color = self.color, type = self.type, speed = self.speed, life = self.life, level = self.level, attack = self.attack, defense = self.defense, movement = self.movement }
    			msg.post("forest/controller#script", "merge_monster", monster)
    		end
	    end
	end
	
    if message_id == hash("set_damage") then
		if self.delay_damage >= 0.5 then
    		self.life = self.life - message.damage
	    	print("Monster Life: " .. self.life)
	    	
	    	if self.life <= 0 then
	    		updateState(self, states.dead)
	    	elseif self.life == 20 and self.type == types.normal then
	    		updateState(self, states.damage)

	    		self.type = types.small
 	    		updateMonster(self)

				local direction = movements.horizontal
				if self.movement == movements.horizontal then
					direction = movements.vertical
				end

	    		local monster = { color = self.color, type = self.type, speed = self.speed, life = self.life, level = self.level, attack = self.attack, defense = self.defense, movement = direction }
	    		msg.post("forest/controller#script", "spawn_monster", { position = go.get_position(self.id), monster = monster })
	    	else
	    		updateState(self, states.damage)
	    	end

			updateHud(self)
	    	self.delay_damage = 0
    	end
    end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
