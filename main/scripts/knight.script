go.property("speed", 200)
go.property("attack", 10)
go.property("defense", 0)
go.property("life", 40)
go.property("experience", 0)
go.property("level", 1)

local states = { idle = 0, attack = 1, damage = 2, dead = 3 }

local function updateState(self, newState)
	if newState ~= self.state then
		if self.delay_damage >= 1 then
			self.state = newState
		end
		
		if self.state == states.idle then
	    	msg.post("#sprite", "play_animation", {id = hash("knight_idle")})
		elseif self.state == states.attack then
	    	msg.post("#sprite", "play_animation", {id = hash("knight_attack")})
		elseif self.state == states.damage then
			--print("KNIGHT ATTACKED")
		elseif self.state == states.dead then
			msg.post("hud#gui", "game_over", { message = "YOU ARE DEAD" } )
			print("YOU ARE DEAD")
			go.delete()
		end
	end
end

local function updateHud(self)
	local percent = (self.life * 100) / self.total_life
	
	if percent >= 100 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_100")})
	elseif percent >= 90 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_90")})
	elseif percent >= 80 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_80")})
	elseif percent >= 70 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_70")})
	elseif percent >= 60 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_60")})
	elseif percent >= 50 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_50")})
	elseif percent >= 40 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_40")})
	elseif percent >= 30 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_30")})
	elseif percent >= 20 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_20")})
	elseif percent >= 10 then
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_10")})
	else
		msg.post("#hud_life", "play_animation", {id = hash("life_bar_0")})
	end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    
    self.state = states.idle
    self.delay_damage = 1;
    self.total_life = self.life
end

function final(self)
    msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.dt = dt

	if self.state == states.damage then
		if self.delay_damage >= 1 then
    		updateState(self, states.idle)
    	else
    		if self.delay_damage < 0.5 then
    			msg.post("#sprite", "play_animation", {id = hash("knight_damage_feedback")})
    		else
    			msg.post("#sprite", "play_animation", {id = hash("knight_damage")})
    		end
    	end
    	self.delay_damage = self.delay_damage + dt
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
    	if message.group == hash("level") then
			local newpos = go.get_position() + message.normal * message.distance
	    	go.set_position(newpos)
	    end
	    
	    if message.group == hash("monster") then
	    	--not here
	    end
	    
	    if message.group == hash("exit") then
	    	msg.post("hud#gui", "the_end", { message = "YOU DID IT!" } )
	    	print("YOU DID IT!")
	    end
	end
	
	if message_id == hash("set_attack") then
		if self.state == states.attack then
	    	msg.post(sender, "set_damage", { damage = self.attack - message.defense })	
	    end
	end
	
	if message_id == hash("set_damage") then
		if self.delay_damage >= 1 then
			self.life = self.life - message.damage
	    	print("Player Life: " .. self.life)
	    	
    		if self.life <= 0 then
	    		updateState(self, states.dead)
	    	else
				updateState(self, states.damage)	    		
	    	end
	    	
	    	updateHud(self)
	    	self.delay_damage = 0
    	end
    end
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == hash("attack") and self.state ~= states.damage then
			updateState(self, states.attack)
		end
	end
	
	if action.released then
		if action_id == hash("attack") and self.state ~= states.damage then
			updateState(self, states.idle)
		end
	end

	local pos = go.get_position("knight")
	
	if action_id == hash("move_up") then
		pos.y = pos.y + (self.speed * self.dt)
	elseif action_id == hash("move_down") then
		pos.y = pos.y - (self.speed * self.dt)
	end
	
	if action_id == hash("move_left") then
		pos.x = pos.x - (self.speed * self.dt)
		sprite.set_hflip("#sprite", false)
	elseif action_id == hash("move_right") then
		pos.x = pos.x + (self.speed * self.dt)
		sprite.set_hflip("#sprite", true)
	end
	
	go.set_position(pos, "knight")
	
	msg.post("camera#script", "look_at", { position = pos })
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
